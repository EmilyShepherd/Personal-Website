<?xml version="1.0" encoding="UTF-8"?>
<memo>
  <title>What have onions got to do with the web?</title>
  <description>
    The Dark Web can't be reached with a normal web browser, but what is 
    it?
  </description>
  <date day="21" month="October" year="2016" />

  <content>
    <section>
      <p>
        We all know what the web is, we use it every day, but did you 
        know that the web is actually split into three broad "sections" 
        based on how easy they are to reach?
      </p>

      <p>
        The top layer is known as the Surface web, and this includes 
        everything that you can reach from search engines like Google or 
        Bing. So lots of the sites you use will fall into this category: 
        YouTube, iPlayer, many news outlets and articles, Wikipedia, all 
        of the Government information pages on gov.uk.
      </p>

      <p>
        The surface layer is great. But it's also boring, so we're not 
        going to talk about it anymore... let's delve further. The next 
        layer down is known as the "Deep Web"; this is the bit of the 
        web that <em>can't</em> be found via Google. As it's harder to 
        find all the pages in this bit of the web, its exact size is 
        largely anyone's guess, however the general guess is that the 
        deep web is quite probably over 550 times larger than the 
        Surface Web. The common analogy for the Web is that of an 
        iceberg <ref to="ICEBERG" />. On the surface it looks 
        impressive, sure, but icebergs are much, <em>much</em> larger 
        under the surface of the water.
      </p>

      <p>
        Now, I'm aware that these terms make the deep web sound really 
        scary. The fact that it's "not on Google" and "difficult to 
        access" leads a lot of people to believe that this area is where 
        a lot of nefarious actives go on. But don't worry, it's not like 
        that at all! You yourself almost certainly use the Deep Web 
        every day too, even though you might not be aware of it. If you 
        use Google Mail, Hotmail, or some other web mail provider, you 
        are accessing the Deep Web. Why? Well, your emails <em>can't be 
          reached</em> from a Google search, right? And nobody is able 
        to access your emails other than you, yes? Those are the two 
        criteria right there; your emails are in the Deep Web. Sites 
        like Facebook, too, exist almost entirely on the Deep Web.
      </p>

      <p>
        As you can see, the Deep Web is quite boring too, so we're not 
        going to talk about that either. We are going to talk about the 
        Dark Web, which I will admit you are much less likely to have 
        ever used. The Dark Web is a section of the Deep Web which 
        requires special software in order to access; we're going to 
        focus on one of the most popular ones: Tor, The Onion Router 
        <ref to="TOR" />.
      </p>
    </section>

    <section title="Why do we need TOR?">
      <p>
        Since its inception in the 1990s <ref to="HTTP-SPEC" />, the 
        World Wide Web has connected the masses with each other, and has 
        opened the door to huge collections of information. With this 
        rise, we came to expect and even depend on this connectivity, 
        with the UN even linking Internet access with the Human Right to 
        Freedom of Expression <ref to="HRC-17-27" />.
      </p>

      <p>
        This raises a couple of concerns: how can we ensure it is 
        possible to use the Internet anonymously and free from 
        censorship?
      </p>

      <p>
        The answer, unfortunately, is: with difficulty. Governments have 
        proven themselves able to censor the Internet within the regions 
        they control. A large example of this is China's "Great Fire 
        Wall" which blocks a huge number of sites which the party have 
        deemed inappropriate, including Facebook and Twitter. The UK has 
        also successfully "censored" the web, with the high courts 
        ordering large ISPs to block a variety of websites which host 
        copyrighted content. The legitimacy of such court orders is a 
        debate for another article, however the example shows that 
        censorship is indeed technologically possible.
      </p>

      <p>
        The other concern, anonymity, is also one that has proven itself 
        hard to achieve. If you've ever used public wifi, the connection 
        between your laptop and the wifi provider was almost certainly 
        unencrypted. In business and home settings, even when the wifi 
        is password protected, it is often trivially easy for other wifi 
        uses to "listen in" on your connection.
      </p>

      <p>
        Nowadays, a lot of websites use a protocol called Transport 
        Layer Security (TLS) <ref to="RFC5246" /> to encrypt traffic to 
        combat this, which adds a layer of encryption even when the 
        connection itself is insecure. However, many sites still don't 
        use TLS and even if they do this still allows a snooper to see 
        the which sites you're visiting. The NHS website, for example, 
        doesn't use TLS, so if you go searching for your symptoms, you 
        are effectively advertising your medical aliments to whoever 
        cares to listen.
      </p>

      <p>
        The obvious answer to this is to never use public wifi, or even 
        wifi that you share with <em>anyone else</em>, and you should 
        also never use a site which doesn't use TLS. Unfortunately, 
        that largely throws away your ability to function in the modern 
        world; while you're at it, why not seal your house in plastic to 
        protect yourself from airborne viruses?
      </p>

      <p>
        Clearly another solution is required: Onions! Well, The Onion 
        Router, at least. Tor is a network of over 7000 servers <ref 
          to="TOR-METRICS" /> all of which are managed by independent 
        volunteers in countries all around the world. These servers are 
        used as "middle men" for your messages, making them much harder 
        to trace and censor.
      </p>
    </section>

    <section title="You still haven't explained where Onions come in">
      <p>
        I know! I know! I'm getting to it, I swear!
      </p>

      <p>
        Let's look at this in more detail. Normally, when you want to 
        connect to, say, Google, your laptop sends a message to one of 
        Google's servers with the computer equivalent of "Hi, how are 
        you? Give me google.com please" and Google's servers will then 
        respond to you with "No problem! Here's the Google Homepage! Our 
        logo is looking particularly zany today!". This isn't anonymous 
        at all! Google can see who you are because it's communicating 
        directly with you, and a snooper can easily see that it's Google 
        that you're talking to.
      </p>

      <p>
        If we were to repeat this via Tor, there'd be a few more steps.  
        Firstly, your computer picks <em>three</em> servers in the Tor 
        network (We'll call these the "entry", "middle", and "exit" 
        nodes). Your computer connects to the entry node and sets up an 
        encrypted channel to it (a snooper can see that you are talking 
        to the entry node, but it can't see what you're sending to it).  
        Here's the cool bit: this Tor node will send messages from 
        itself <em>on your behalf</em>; you are able to send messages to 
        other Tor servers via this entry node. Think of it like sending 
        a letter to your friend via the post office. From your friend's 
        perspective, the letter came "from" the postman; if you don't 
        sign the letter, they wouldn't even know it was originally from 
        you.
      </p>

      <p>
        This is the same for the Tor network; you can now connect to, 
        and setup <em>another</em> encrypted channel with, the middle 
        node via that entry node. As far as the middle node can see, its 
        talking to the entry node; it can't see you at all!
      </p>

      <p>
        Your laptop is then able to repeat this process, creating an 
        encrypted channel to the exit node, via the encrypted channel to 
        the middle node which is itself connected via the encrypted 
        channel to the entry node.  The whole setup creates multiple 
        "layers" of encryption, which get "unwrapped" at each step of 
        the journey.
      </p>

      <p>
        Guess what else has layers? Onions! Bet you're glad you waited 
        for that explanation, huh?
      </p>

      <p>
        The lovely thing about this setup is that the entry node 
        <em>only</em> knows about you and the middle node; it has no 
        idea about the exit node. The middle node <em>only</em> knows 
        about the entry and the exit nodes; it has no idea who you are.  
        And the exit node <em>only</em> knows about the middle node; it 
        doesn't know about either the entry node or you! Finally, you're 
        able to use your connection to the exit node to connect to any 
        website you like and that website won't be able to see you at 
        all, it just sees the exit. Total anonymity! Oh, and just to 
        make it even more secure, the client selects a new three nodes 
        every ten minutes.
      </p>

      <p>
        The other plus side of this is that, as I said, Tor relays are 
        run in a variety of different countries, so even if a site is 
        blocked in your country, you can use Tor to access that site 
        assuming the exit is running in a different country.
      </p>
    </section>

    <section title="Tor: Not just for users">
      <p>
        So far we've looked at Tor from a user's perspective; we've seen 
        how you can use Tor to access blocked web sites, and to do so in 
        a truly anonymous fashion. But what about the other side: the 
        web sites themselves?
      </p>

      <p>
        The web site I used as an example in the previous section, 
        Google, exists in the normal surface web; it can easily be 
        accessed by everyone and everyone knows who runs it and where 
        their servers are based. What if Google wanted to remain 
        anonymous? An example of such a service would be a forum 
        dedicated to members speaking out against an oppressive regime, 
        or for survivors of abuse, etc... Clearly some people may see 
        the appeal in keeping the location and administrators of such 
        sites out of public knowledge.
      </p>

      <p>
        Unfortunately, it's a bit more of a technical challenge to 
        achieve this.  Think back to our post office example; it's easy 
        to post an unsigned letter to hide your identity, but it's a bit 
        harder to send a letter to an unknown identity. What address do 
        you put on the envelope?
      </p>

      <p>
        Luckily our good ol' Onion Router has found a way to make       
        anonymous sites work; it calls these "hidden services" <ref 
          to="TOR-HSP" />. If you thought the process I described above 
        was a faff, wait till you hear this!  As "faff" isn't a very 
        technical term, we'll refer to the above process of picking an 
        entry, middle and exit and connecting to them as "building a 
        circuit".  First off, a hidden service picks a handful of tor 
        relays and builds a separate circuit to each of them; once 
        connected, it asks each one to act as an "Introduction Point" 
        for the service <ref to="TOR-SPEC" />. Although the Introduction 
        Points do know the name of the hidden service, they have no idea 
        where in the world the hidden service actually is, as they where 
        connected via a tor circuit. When these are set up, the hidden 
        service is able to advertise itself, and the Introduction Points 
        its connected to, in Tor's distributed list of hidden services.
      </p>

      <p>
        Now, if any client wants to access a hidden service, it picks 
        <em>another</em> completely random tor relay and builds a 
        circuit to that; it then asks that relay if it would act as a 
        "Rendezvous Point" <ref to="REND-SPEC" />. Next, the client 
        builds a separate circuit to one of the Introduction points, and 
        asks it to forward a message down the circuit leading back to 
        the hidden service.  This message is, of course, encrypted so 
        the Introduction Point can't read it, but the hidden service 
        can.  The message asks the hidden service to connect with the 
        client at the client's chosen Rendezvous point; the hidden 
        service builds a circuit to that relay and uses that to contact 
        the client.
      </p>

      <p>
        We now have a situation in which the client and hidden service 
        are able to talk to each other; there's a circuit (three relays) 
        between the client and the Rendezvous point and then another 
        circuit (so another three relays) between the Rendezvous point 
        and the hidden service. These hidden services make up part of 
        what I called the Dark Web above. As you can see, these things 
        absolutely won't be showing up on Google searches as this system 
        is utterly anonymous for all involved:
      </p>

      <ul>
        <li>
          The Rendezvous point doesn't know the identity of the client 
          or hidden service (it doesn't even know which hidden service 
          it is!)
        </li>
        <li>
          The client knows it's talking to the hidden service it wanted, 
          but doesn't know anything about where that service is hosted
        </li>
        <li>
          The hidden service doesn't know anything about the client
        </li>
        <li>
          The original Introduction Point doesn't know who the client 
          was, or where the hidden service was located, and doesn't know 
          where the two decided to rendezvous.
        </li>
      </ul>
    </section>

    <section title="Is Tor Crackable?">
      <p>
        In principle, the general consensus is that it is not crackable,
        although it is very difficult to be 100% sure of these things.  
        While it is true that many hidden services <em>have</em> been 
        shut down after police intervention, in all known cases it 
        thought that weaknesses in Tor itself weren't to blame.
      </p>

      <p>
        In the case of the Silk Road, for example, an illegal 
        marketplace hosted as a hidden service which was shut down by 
        the FBI in 2013 and again in 2014, it is believed this was 
        achieved by under cover agents gaining the trust of the site's 
        administrator. In other cases, the administrators and members of 
        certain sites have been found by law enforcement agencies by 
        following the trail of money.
      </p>

      <p>
        In short, Tor doesn't give you a free pass; you still have to be 
        careful if you want to remain anonymous. If you send an email 
        through tor, for example, make sure your email client doesn't 
        automatically put your standard email signature at the bottom, 
        as that might be a bit of a give away of who you are!
      </p>

      <p>
        There are, however, a few known theoretical attacks to the Tor 
        network, which I'll briefly go over:
      </p>

      <section title="Exit Vulnerabilities">
        <p>
          The weakest point in a circuit is arguably the exit node; 
          unlike the entry and middle nodes, the exit node is able to 
          see whatever you're actually sending out to the Internet 
          (because it's the one sending it out!). If you send 
          unencrypted identifying information, the exit node would be 
          able to use this to identify you if it were run by a malicious 
          party.  For this reason, it is still recommended that Tor 
          users use TLS or another form of encryption where possible.  
          Also, when it is believed that an exit is monitoring or 
          interfering with its traffic, it will also be prompted listed 
          as a "BadExit" so everyone knows to avoid it!
        </p>
      </section>

      <section title="How secure is a Circuit?">
        <p>
          Speaking of the weakness of circuits, the security which is 
          provided by using three nodes can only be relied upon if those 
          three nodes are run by three <em>independent</em> entities. If 
          you happened to connect to three nodes, all of which were run 
          by the same person or government, it would be trivially easy 
          for them to piece together your connection from end to end. In 
          a way, that might actually make it <em>easier</em> for the 
          government to snoop on you, because you'd be sending all of 
          your connection to their servers for them!
        </p>

        <p>
          Luckily, this risk is mitigated; the list of all the nodes is 
          public, including the IP address, network and location. If a 
          bunch of nodes were running from the same network, this would 
          be easy to spot. On top of this, relays aren't trusted 
          straight away; it takes a few days for traffic to build up on 
          a new node.  Although this doesn't guarantee safety in itself, 
          it prevents the risk of an evil party suddenly starting a 
          bunch of relays and effectively taking over the network before 
          anyone has a chance to react and shut them out of the network 
          (this is known as a Sybil attack).
        </p>

        <p>
          It should be noted that this doesn't prevent legitimate people 
          from donating more than one relay if they so choose (like I 
          do!); however, when donating more than one, you must self 
          identify that your nodes are part of a commonly controlled 
          "family". Users will only ever choose a maximum of one relay 
          per family when building their circuits.
        </p>
      </section>

      <section title="Guards to the Rescue!">
        <p>
          So it wouldn't be very easy to overpower the tor network with 
          a majority of servers, but isn't it still possible to 
          stealthily run a handful of relays in different networks &amp; 
          locations and use these to observe those that are unlucky 
          enough to build a circuit completely controlled by you?  It 
          is, but remember that clients rebuild their circuits every ten 
          minutes, so you only get tiny fractions of the network who are 
          susceptible to this at any one time.
        </p>

        <p>
          Unless... unless you could somehow trick clients into picking 
          a circuit controlled by you. Imagine a client builds a circuit 
          but only includes a single one of your nodes; this doesn't 
          give you enough information to snoop on them, but it does give 
          you control...
        </p>

        <p>
          You could set your node to automatically "fail" whenever this 
          situation occurs by simply refusing to accept the connection.  
          This would force the client to generate a new circuit; forcing 
          the client to generate lots and lots of circuits increases the 
          chance that it'll eventually pick one that you control 
          completely. This is known as a denial of service as denial of 
          anonymity attack.
        </p>

        <p>
          This is where "Guard" nodes come in; guards are relays that 
          have been running for a while and have proven themselves 
          reliable (in other words they haven't been observed to 
          continuously refuse to form connections).  When a client forms 
          a circuit for the first time, it will always pick its entry 
          node from the set of guards.  Once this is done, it will stick 
          with this entry node for a long time (around 2 months).  
          Whenever a new circuit is required, the middle and exit nodes 
          are changed, but the guard node is kept intact. As a result, 
          badly behaving middles and exits are free to force you to 
          regenerate as much as they like, but your guards will remain 
          fixed, effectively capping the chance that you'll be 
          compromised.
        </p>
      </section>

      <section title="Can we analyse what we've got?">
        <p>
          Great! So it is very hard to control an entire tor circuit, 
          but what information <em>can</em> you get if you just control 
          one or two nodes in a circuit? Remember that network within 
          the tor network is always encrypted so nothing can be gleaned 
          from the content of messages there are a couple of things you 
          could attempt to analyse: the size and timing of messages.  
          For example, say you were attempting track down a dissident 
          who was planning on leaking a 187MB page document to the press 
          at 13:00.  Now let's say that you run a node, and at 13:00 a 
          user connects to your node as an entry and sends 187MB of 
          encrypted traffic.  You might have a hunch that that's your 
          guy there...
        </p>

        <p>
          As with all things Tor, there are mitigation tactics in place, 
          fear not!  In computer networking, it is common for messages 
          to be split up into multiple units called packets.  This makes 
          it easier for the Internet to manage and keep track of the 
          enormous amount of data that gets sent across it every day.  
          Think of it like a shipping company: if you order a 12 million 
          "I love Emily" posters from a factory in China, it's more than 
          likely that that'll be split between a bunch of shipping 
          containers.  It's even possible that those containers might be 
          loaded onto different freight ships / trains / trucks, etc.
        </p>

        <p>
          In an attempt to reduce an attacker's ability to analyse 
          message sizes, Tor uses identically sized packets, so when 
          messages are split up and thrown into the tor network, they 
          immediately become indistinguishable from the rest of the 
          traffic on the tor network. It's a bit like the classic game 
          where you have to follow which identical upturned cup has a 
          ball within it.  But there are literally thousands of cups.  
          And multiple balls. And there are portions of the table which 
          are covered up, preventing you from seeing when swaps occur.
        </p>
      </section>
    </section>
  </content>

  <references>
    <reference id="TOR">
      <author>Electronic Frontier Foundation</author>
      <title>Tor Project: Anonymity Online</title>
      <url>https://www.torproject.org/</url>
    </reference>

    <reference id="ICEBURG">
      <author>Shestakov, D.</author>
      <title>On Building a Search Interface Discovery System</title>
      <date month="June" year="2010" />
      <url>
        https://www.researchgate.net/publication/225102663_On_Building_a_Search_Interface_Discovery_System
      </url>
    </reference>

    <reference id="HRC-17-27">
      <title>
        Report of the Special Rapporteur on the promotion and protection 
        of the right to freedom of opinion and expression, Frank La Rue
      </title>
      <author>Human Rights Council, United Nations</author>
      <date day="16" month="May" year="2011" />
      <url>
        http://www2.ohchr.org/english/bodies/hrcouncil/docs/17session/A.HRC.17.27_en.pdf
      </url>
    </reference>

    <reference id="HTTP-SPEC">
      <title>
        Hypertext Transfer Protocol (HTTP) - A Stateless Search, 
        Retrieve and Manipulation Protocol
      </title>
      <author>Berners-Lee, T.</author>
      <date month="November" year="1993" day="5" />
      <url>ftp://ftp.uni-potsdam.de/pub/WWW/CERN/doc/http-spec.txt</url>
    </reference>

    <reference id="TOR-METRICS">
      <title>Tor Metrics - Number of relays and bridges</title>
      <author>Tor Project, Inc</author>
      <date day="13" month="October" year="2016" />
      <url>https://metrics.torproject.org/servers-data.html</url>
    </reference>

    <reference id="RFC5246">                                             
      <title>                                                            
        The Transport Layer Security (TLS) Protocol Version 1.2          
      </title>                                                           
      <author>Dierks, T. and Rescorla, E.</author>                       
      <date month="August" year="2008" />                                
      <url>https://tools.ietf.org/html/rfc5246</url>                     
    </reference>

    <reference id="TOR-HSP">
      <title>Tor: Hidden Service Protocol</title>
      <author>Tor Project, Inc</author>
      <url>https://www.torproject.org/docs/hidden-services.html.en</url>
    </reference>

    <reference id="TOR-SPEC">
      <title>Tor: The Second-Generation Onion Router</title>
      <author>Dingledine, R., Mathewson, N., and Syverson, P.</author>
      <url>
        https://svn.torproject.org/svn/projects/design-paper/tor-design.html
      </url>
    </reference>

    <reference id="REND-SPEC">
      <title>Tor Rendezvous Specification</title>
      <author>Tor Project, Inc</author>
      <url>
        https://gitweb.torproject.org/torspec.git/tree/rend-spec.txt
      </url>
    </reference>
  </references>
</memo>
